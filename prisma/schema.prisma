// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String  @unique
  emailVerified DateTime?
  image        String?
  image_key String? 
  hash String?
  accountType  AccountType @default(PRIVATE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  payedCourses  Payment[]
  department  String?
  description String?

  accounts      Account[]
  reviews  Review[]
  notifications  Notification[]
  roles UserRole[]
  permissions UserPermission[]
  teacher  Teacher?
  subscribers Subscriber[]
  courseStreaks CourseStreak[]
  longestStreak Streak?
  currentStreak Streak?
}



type Streak{
  startAt     DateTime  @default(now())
  endAt         DateTime  @default(now())
  streak       Int @default(0)

}


model CourseStreak{
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
   streak  Streak

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId



}








model Roles {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
   users    UserRole[]
  permissions      RolePermission[]
}

model UserRole {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @db.ObjectId
   role       Roles      @relation(fields: [roleId], references: [id], onDelete: Cascade)
   roleId String @db.ObjectId
  
}

model Permission {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  action         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users      UserPermission[]
  roles     RolePermission[]
}


model UserPermission {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @db.ObjectId
   permission       Permission      @relation(fields: [permissionId], references: [id], onDelete: Cascade)
   permissionId String @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}


model RolePermission {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  permission       Permission      @relation(fields: [permissionId], references: [id], onDelete: Cascade)
   permissionId String @db.ObjectId
   role       Roles      @relation(fields: [roleId], references: [id], onDelete: Cascade)
   roleId String @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken{
 id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token  String @unique
  expires DateTime

  @@unique([email, token])

}



model Teacher{
id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   courses  Course[]  @relation("createdCourses")
   title String ?
   user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @db.ObjectId @unique
   accountVerified DateTime?
   status Boolean @default(false)
   accountName String?
   bankAccount String?
   logo File?
   description String?
   subscribers Subscriber[]
}
model Subscriber{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   teacher           Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId         String     @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @db.ObjectId

}

model Course {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  course        String
  subject           Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId         String     @db.ObjectId
  cover             File?
  videoUrl          File?
  videoThumbnail    File?
  price             Float
  rating            Float?
  status            Boolean    @default(false)
  descriptions      String
  requirements      String
  whoShouldTake     String?
  chapters          Chapter[]
  payments          PaymentCourse[]
  instructor        Teacher    @relation("createdCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId      String     @db.ObjectId
  reviews           Review[]
  streaks         CourseStreak[]
}

model Payment {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  recit            File?
  bank             String
  transaction      String     @unique
  totalPrice       Float
  courses          PaymentCourse[]
  customer         User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String     @db.ObjectId
  department       Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId     String?    @db.ObjectId
  status           Boolean    @default(false)
}

model PaymentCourse {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String   @db.ObjectId
  payment     Payment  @relation(fields: [paymentId], references: [id])
  paymentId   String   @db.ObjectId
}





model Chapter{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
   courseId String @db.ObjectId
   title String
   lessons Lesson[]

}


model Lesson{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
   chapterId String @db.ObjectId
   title String
   videoUrl File?
   videoThumbnail File?
   contents Content[]
   questions Question []

}


model Content {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  lesson       Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId     String       @db.ObjectId
  image        File?
  content      String?
  codeExample  CodeExample?
  subContents  Content[]    @relation("ParentToSubContent")
  parent       Content?     @relation("ParentToSubContent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId     String?      @db.ObjectId
}


type CodeExample{
  language String
  code String

}
model Question{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   lesson Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
   lessonId String? @db.ObjectId
   department    Department?     @relation( fields: [departmentId], references: [id], onDelete: Cascade)
   departmentId String? @db.ObjectId
   university    University?     @relation( fields: [universityId], references: [id], onDelete: Cascade)
   universityId String? @db.ObjectId
   title String
   title_two String? 
   code  CodeExample?
   q_image File?
   chooses Choose[]
   year String ?
   explanation String?
    subject Subject?  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId  String? @db.ObjectId
   isModel Boolean ?

}

type Choose{
  isAnswer Boolean @default(false)
  text String
}


model University{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   name String
   code String @unique
   logo File?
   question Question[]

}

model Category{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   title String

}

model Review{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   comment String
   rating Float
   customer      User      @relation( fields: [customerId], references: [id], onDelete: Cascade)
   customerId String @db.ObjectId
   course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
   courseId String @db.ObjectId

}














model Notification{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   title String
   message String
   user User@relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @db.ObjectId
   customers Customer[]
   isRead  Boolean @default(false)
   type String @default("Success")
   url String?

}

type Customer{
  id String
  name String
  email String 
}




model Exam{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   examType   String   @unique
   cover File?
   url String  @unique
   departments Department[]
}

model Department{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   exam     Exam ?     @relation( fields: [examId], references: [id], onDelete: Cascade)
   examId String ? @db.ObjectId
   departmentName String   @unique
   cover File?
   url String  @unique
   questions Question[]
   payments  Payment[]
   subject  Subject[]
}


model Subject{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
  department    Department    @relation( fields: [departmentId], references: [id], onDelete: Cascade)
   departmentId String  @db.ObjectId
   subjectName  String  
   questions Question[]
   course  Course[]
   cover File?
   banner File?
}





model Bank{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   name String
   bankName String
   account String
   logo  File?


}


model Hero{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   title String
   subtitle String?
   logo  File?


}




type File{
  public_key String
  public_url String

}



 // contacts
  model Contact{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   name String
   email String
   message String
   
}


enum AccountType{
  PRIVATE
  PUBLIC
}