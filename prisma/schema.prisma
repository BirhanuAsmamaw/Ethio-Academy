// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String  @unique
  emailVerified DateTime?
  image        String?
  image_key String? 
  hash String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  payedCourses  Payment[]
  createdCourses  Course[]  @relation("createdCourses")
  role   Role @default(USER)
  accounts      Account[]
  reviews  Review[]
  notifications  Notification[]
}



model VerificationToken{
 id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token  String @unique
  expires DateTime

  @@unique([email, token])

}



model Course{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   subject String
  department DepartmentType
   cover File?
   videoUrl File?
   videoThumbnail File?
   price Float
   rating Float?
   descriptions String
   requirements String
   whoShouldTake String?
   chapters Chapter[]
   creator       User      @relation("createdCourses", fields: [creatorId], references: [id], onDelete: Cascade)
   creatorId String @db.ObjectId
   reviews  Review[]
   

}

type DepartmentType{
  code String 
  name String 
}


model Chapter{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
   courseId String @db.ObjectId
   title String
   lessons Lesson[]

}


model Lesson{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
   chapterId String @db.ObjectId
   title String
   videoUrl File?
   videoThumbnail File?
   content String
   questions Question []

}


model Question{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   lesson Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
   lessonId String? @db.ObjectId
   department    Department?     @relation( fields: [departmentId], references: [id], onDelete: Cascade)
   departmentId String? @db.ObjectId
   title String
   title_two String? 
   q_image File?
   chooses Choose[]
   year String
   explanation String?
   subject String?
   isModel Boolean @default(false)

}

type Choose{
  isAnswer Boolean @default(false)
  text String
}


model Category{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   title String

}

model Review{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   comment String
   rating Float
   customer      User      @relation( fields: [customerId], references: [id], onDelete: Cascade)
   customerId String @db.ObjectId
   course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
   courseId String @db.ObjectId

}



model Payment{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   recit       File?
   bank        String
   transaction String      @unique
   totalPrice       Float
  

  courses      PaymentCourse[] 
   customer User@relation(fields: [customerId], references: [id], onDelete: Cascade)
   customerId String @db.ObjectId

  department Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
   departmentId String? @db.ObjectId
   status  Boolean  @default(false)
}

type PaymentCourse{
  id String
  subject String
  price Float


}

type PaymentDepartmentExam{
  id String
  departmentName String
  price Float


}

model Notification{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   title String
   message String
   user User@relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @db.ObjectId
   customers Customer[]
   isRead  Boolean @default(false)
   type String @default("Success")
   url String?

}

type Customer{
  id String
  name String
}




model Exam{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   examType   String   @unique
   cover File?
   url String  @unique
   departments Department[]
}

model Department{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   exam     Exam ?     @relation( fields: [examId], references: [id], onDelete: Cascade)
   examId String ? @db.ObjectId
   departmentName String   @unique
   cover File?
   url String  @unique
   questions Question[]
   payments  Payment[]
   subject  Subject[]
}


model Subject{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
  department    Department    @relation( fields: [departmentId], references: [id], onDelete: Cascade)
   departmentId String  @db.ObjectId
   subjectName  String  
   cover File?
   banner File?
}





model Bank{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   name String
   bankName String
   account String
   logo  File?


}


model Hero{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   title String
   subtitle String?
   logo  File?


}




type File{
  public_key String
  public_url String
}
enum Role{
   USER
   TEACHER
    ADMIN
   
}